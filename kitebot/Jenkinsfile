pipeline {
    agent none
    environment {
        GCN_URL = credentials('google-chat-rhel-edge-url')
        TRIGGERED_BY = get_triggered_by()
    }

    stages {
        stage('Preparing') {
            when {
                beforeAgent true
                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
            }
            agent { label 'container-fedora-35-prod' }
            steps {
                script {
                    env.COMPOSE_ID = sh(returnStdout: true, script: 'echo $CI_MESSAGE | /usr/bin/jq -r ".compose_id"').trim()
                    print(env.COMPOSE_ID)
                    if (env.COMPOSE_ID == "null") {
                        env.COMPOSE_ID = sh(returnStdout: true, script: 'echo $CI_MESSAGE | /usr/bin/jq -r ".compose.compose_info.payload.compose.id"').trim()
                        env.RELEASE_VERSION = sh(returnStdout: true, script: 'echo $CI_MESSAGE | /usr/bin/jq -r ".compose.compose_info.payload.release.version"').trim()
                    } else {
                        env.RELEASE_VERSION = sh(returnStdout: true, script: 'echo $CI_MESSAGE | /usr/bin/jq -r ".release_version"').trim()
                    }
                    currentBuild.displayName = "${env.BUILD_NUMBER}-${env.COMPOSE_ID}"
                }
            }
        }
        stage('Testing') {
            parallel {
                stage('EL8.5 Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.5.0'
                                    environment name: 'RELEASE_VERSION', value: '8.5.1'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL85_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-5-0' }
                    environment {
                        TEST_OS = "rhel-8-5"
                    }
                    steps {
                        run_virt_test('ostree-legacy')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-KVM')
                        }
                    }
                }
                stage('EL8.5 ng Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.5.0'
                                    environment name: 'RELEASE_VERSION', value: '8.5.1'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL85_NG_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-5-0' }
                    environment {
                        TEST_OS = "rhel-8-5"
                    }
                    steps {
                        run_virt_test('ostree-ng')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-NG-KVM')
                        }
                    }
                }
                stage('EL8.5 raw image') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.5.0'
                                    environment name: 'RELEASE_VERSION', value: '8.5.1'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL85_RAW', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-5-0' }
                    environment {
                        TEST_OS = "rhel-8-5"
                    }
                    steps {
                        run_virt_test('raw-image')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-RAW-KVM')
                        }
                    }
                }
                stage('EL8.5 simplified installer') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.5.0'
                                    environment name: 'RELEASE_VERSION', value: '8.5.1'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL85_SIMPLIFIED', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-5-0' }
                    environment {
                        TEST_OS = "rhel-8-5"
                    }
                    steps {
                        run_virt_test('simplified-installer')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-SIMPLE-KVM')
                        }
                    }
                }
                stage('EL8.5 ng Bare') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.5.0'
                                    environment name: 'RELEASE_VERSION', value: '8.5.1'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL85_BARE', value: 'true'
                            }
                        }
                    }
                    agent { label 'container-fedora-35-prod' }
                    environment {
                        TEST_OS = "rhel-8-5"
                        ARCH = 'x86_64'
                    }
                    steps {
                        run_bare_test()
                    }
                    post {
                        always {
                            preserve_bare_logs()
                            send_result('Bare-metal-beaker')
                            bare_clean()
                        }
                    }
                }
                stage('EL8.6 Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL86_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-6-0' }
                    environment {
                        TEST_OS = "rhel-8-6"
                    }
                    steps {
                        run_virt_test('ostree-legacy')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-KVM')
                        }
                    }
                }
                stage('EL8.6 ng Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL86_NG_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-6-0' }
                    environment {
                        TEST_OS = "rhel-8-6"
                    }
                    steps {
                        run_virt_test('ostree-ng')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-NG-KVM')
                        }
                    }
                }
                stage('EL8.6 raw image') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL86_RAW', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-6-0' }
                    environment {
                        TEST_OS = "rhel-8-6"
                    }
                    steps {
                        run_virt_test('raw-image')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-RAW-KVM')
                        }
                    }
                }
                stage('EL8.6 simplified installer') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL86_SIMPLIFIED', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-6-0' }
                    environment {
                        TEST_OS = "rhel-8-6"
                    }
                    steps {
                        run_virt_test('simplified-installer')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-SIMPLE-KVM')
                        }
                    }
                }
                stage('EL8.6 rebase') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL86_REBASE', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-8-6-0' }
                    environment {
                        TEST_OS = "rhel-8-6"
                    }
                    steps {
                        run_virt_test('ostree-rebase')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-REBASE')
                        }
                    }
                }
                stage('EL8.6 ng Bare') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL86_BARE', value: 'true'
                            }
                        }
                    }
                    agent { label 'container-fedora-35-prod' }
                    environment {
                        TEST_OS = "rhel-8-6"
                        ARCH = 'x86_64'
                    }
                    steps {
                        run_bare_test()
                    }
                    post {
                        always {
                            preserve_bare_logs()
                            send_result('Bare-metal-beaker')
                            bare_clean()
                        }
                    }
                }
                stage('EL9.0 Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL90_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-9-0-0' }
                    environment {
                        TEST_OS = "rhel-9-0"
                    }
                    steps {
                        run_virt_test('ostree-legacy')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-KVM')
                        }
                    }
                }
                stage('EL9.0 ng Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL90_NG_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-9-0-0' }
                    environment {
                        TEST_OS = "rhel-9-0"
                    }
                    steps {
                        run_virt_test('ostree-ng')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-NG-KVM')
                        }
                    }
                }
                stage('EL9.0 raw image') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL90_RAW', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-9-0-0' }
                    environment {
                        TEST_OS = "rhel-9-0"
                    }
                    steps {
                        run_virt_test('raw-image')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-RAW-KVM')
                        }
                    }
                }
                stage('EL9.0 simplified installer') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL90_SIMPLIFIED', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-9-0-0' }
                    environment {
                        TEST_OS = "rhel-9-0"
                    }
                    steps {
                        run_virt_test('simplified-installer')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-SIMPLE-KVM')
                        }
                    }
                }
                stage('EL9.0 rebase') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL90_REBASE', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-rhel-9-0-0' }
                    environment {
                        TEST_OS = "rhel-9-0"
                    }
                    steps {
                        run_virt_test('ostree-rebase')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-REBASE')
                        }
                    }
                }
                stage('EL9.0 ng Bare') {
                    when {
                        beforeAgent true
                        anyOf {
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'RHEL90_BARE', value: 'true'
                            }
                        }
                    }
                    agent { label 'container-fedora-35-prod' }
                    environment {
                        TEST_OS = "rhel-9-0"
                        ARCH = 'x86_64'
                    }
                    steps {
                        run_bare_test()
                    }
                    post {
                        always {
                            preserve_bare_logs()
                            send_result('Bare-metal-beaker')
                            bare_clean()
                        }
                    }
                }
                stage('CS8 Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS8_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs8' }
                    environment {
                        TEST_OS = "centos-stream-8"
                    }
                    steps {
                        run_virt_test('ostree-legacy')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-KVM')
                        }
                    }
                }
                stage('CS8 ng Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS8_NG_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs8' }
                    environment {
                        TEST_OS = "centos-stream-8"
                    }
                    steps {
                        run_virt_test('ostree-ng')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-NG-KVM')
                        }
                    }
                }
                stage('CS8 raw image') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS8_RAW', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs8' }
                    environment {
                        TEST_OS = "centos-stream-8"
                    }
                    steps {
                        run_virt_test('raw-image')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-RAW-KVM')
                        }
                    }
                }
                stage('CS8 simplified installer') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS8_SIMPLIFIED', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs8' }
                    environment {
                        TEST_OS = "centos-stream-8"
                    }
                    steps {
                        run_virt_test('simplified-installer')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-SIMPLE-KVM')
                        }
                    }
                }
                stage('CS8 rebase') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS8_REBASE', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs8' }
                    environment {
                        TEST_OS = "centos-stream-8"
                    }
                    steps {
                        run_virt_test('ostree-rebase')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-REBASE')
                        }
                    }
                }
                stage('CS8 ng Bare') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '8.6.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS8_BARE', value: 'true'
                            }
                        }
                    }
                    agent { label 'container-fedora-35-prod' }
                    environment {
                        TEST_OS = "centos-stream-8"
                        ARCH = 'x86_64'
                    }
                    steps {
                        run_bare_test()
                    }
                    post {
                        always {
                            preserve_bare_logs()
                            send_result('Bare-metal-beaker')
                            bare_clean()
                        }
                    }
                }
                stage('CS9 Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS9_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs9' }
                    environment {
                        TEST_OS = "centos-stream-9"
                    }
                    steps {
                        run_virt_test('ostree-legacy')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-KVM')
                        }
                    }
                }
                stage('CS9 ng Virt') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS9_NG_VIRT', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs9' }
                    environment {
                        TEST_OS = "centos-stream-9"
                    }
                    steps {
                        run_virt_test('ostree-ng')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-NG-KVM')
                        }
                    }
                }
                stage('CS9 raw image') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS9_RAW', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs9' }
                    environment {
                        TEST_OS = "centos-stream-9"
                    }
                    steps {
                        run_virt_test('raw-image')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-RAW-KVM')
                        }
                    }
                }
                stage('CS9 simplified installer') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS9_SIMPLIFIED', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs9' }
                    environment {
                        TEST_OS = "centos-stream-9"
                    }
                    steps {
                        run_virt_test('simplified-installer')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-SIMPLE-KVM')
                        }
                    }
                }
                stage('CS9 rebase') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS9_REBASE', value: 'true'
                            }
                        }
                    }
                    agent { label 'vm-cs9' }
                    environment {
                        TEST_OS = "centos-stream-9"
                    }
                    steps {
                        run_virt_test('ostree-rebase')
                    }
                    post {
                        always {
                            preserve_logs()
                            get_package_info()
                            send_result('Virt-REBASE')
                        }
                    }
                }
                stage('CS9 ng Bare') {
                    when {
                        beforeAgent true
                        anyOf {
                            environment name: 'TRIGGERED_BY', value: 'Started by timer'
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Triggered by CI message.'
                                anyOf {
                                    environment name: 'RELEASE_VERSION', value: '9.0.0'
                                }
                            }
                            anyOf {
                                environment name: 'TRIGGERED_BY', value: 'Branch indexing'
                                expression { return env.TRIGGERED_BY.matches("Pull request(.*)") }
                            }
                            allOf {
                                environment name: 'TRIGGERED_BY', value: 'Started by user Xiaofeng'
                                environment name: 'CS9_BARE', value: 'true'
                            }
                        }
                    }
                    agent { label 'container-fedora-35-prod' }
                    environment {
                        TEST_OS = "centos-stream-9"
                        ARCH = 'x86_64'
                    }
                    steps {
                        run_bare_test()
                    }
                    post {
                        always {
                            preserve_bare_logs()
                            send_result('Bare-metal-beaker')
                            bare_clean()
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                print(currentBuild.getBuildCauses()[0])
            }
        }
    }
    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
    }
}

void get_triggered_by() {
    return currentBuild.getBuildCauses()[0].shortDescription
}

void run_virt_test(test_type) {
    sh label: 'wait until cloud-init done', script: """
        while true; do
            test -f /var/lib/cloud/instance/boot-finished && break
        done
        printenv
    """

    if (test_type == 'ostree-ng') {
        withCredentials([usernamePassword(credentialsId: 'quay-io-credential', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USERNAME'), string(credentialsId: 'ocp4-token', variable: 'OCP4_TOKEN')]) {
            sh "./ostree-ng.sh"
        }
    }
    if (test_type == 'ostree-legacy') {
        sh "./ostree.sh"
    }
    if (test_type == 'raw-image') {
        sh "./ostree-raw-image.sh"
    }
    if (test_type == 'simplified-installer') {
        sh "./ostree-simplified-installer.sh"
    }
    if (test_type == 'ostree-rebase') {
        sh "./ostree-rebase.sh"
    }
}

void run_bare_test() {
    sh "ansible-galaxy collection install containers.podman"
    withCredentials([file(credentialsId: 'openstack-clouds-yaml', variable: 'OS_CLIENT_CONFIG_FILE')]) {
        sh label: 'run ansible playbook', script: """
            printenv
            ansible-playbook -v -i inventory ostree-bare-ng.yml
        """
    }
}

void preserve_logs() {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'osbuild-*.log'
    archiveArtifacts allowEmptyArchive: true, artifacts: 'osbuild-*.json'
}

void preserve_bare_logs() {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'report.xml'
    archiveArtifacts allowEmptyArchive: true, artifacts: 'log/*'
}

void send_result(test_type) {
    script {
        if (env.TRIGGERED_BY == 'Triggered by CI message.') {
            googlechatnotification message: "${currentBuild.currentResult}\nCompose: ${env.COMPOSE_ID}\nPackages: ${env.PACKAGE_INFO}\nTest Env: ${test_type}\nConsole Log: ${env.BUILD_URL}display/redirect",
                                   notifyAborted: true,
                                   notifyFailure: true,
                                   notifyNotBuilt: true,
                                   notifySuccess: true,
                                   url: "${env.GCN_URL}"
        }
        if (env.TRIGGERED_BY == 'Started by timer') {
            googlechatnotification message: "${currentBuild.currentResult}\nTest Env: ${test_type}\nConsole Log: ${env.BUILD_URL}display/redirect",
                                   notifyAborted: true,
                                   notifyFailure: true,
                                   notifyNotBuilt: true,
                                   notifySuccess: true,
                                   url: "${env.GCN_URL}"
        }
    }
}

void get_package_info() {
    script {
        env.PACKAGE_INFO = sh(returnStdout: true, script: 'rpm -qa | grep -E "osbuild|composer-cli"').trim()
    }
}

void bare_clean() {
    withCredentials([file(credentialsId: 'openstack-clouds-yaml', variable: 'OS_CLIENT_CONFIG_FILE')]) {
        sh "ansible-playbook -v -i inventory ostree-bare-clean.yml"
    }
}
