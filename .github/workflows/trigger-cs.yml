---
name: CentOS Stream compose trigger

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'

env:
  COMPOSE_URL_CS9: https://odcs.stream.centos.org/production/

jobs:
  check-compose:
    # Do not run this job on any fork repos
    if: github.repository == 'virt-s1/rhel-edge'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check CentOS Stream 9 compose
        id: check_compose_id_cs9
        run: |
          CURRENT_COMPOSE_CS9=$(curl -s "${COMPOSE_URL_CS9}/" | grep -ioE ">CentOS-Stream-9-.*/<" | tr -d '>/<' | tail -1)
          curl -s ${COMPOSE_URL_CS9}/${CURRENT_COMPOSE_CS9}/STATUS --output STATUS_CS9
          STATUS_CS9=$(cat STATUS_CS9)
          if [[ "$STATUS_CS9" == "FINISHED" ]]; then
              COMPOSE_ID_CS9=$CURRENT_COMPOSE_CS9
              TESTED_COMPOSE_CS9=( $( cat compose/compose.cs9 ) )
              if [[ " ${TESTED_COMPOSE_CS9[*]} " =~ "$COMPOSE_ID_CS9" ]]; then
                  COMPOSE_ID_CS9="false"
              fi
          else
              COMPOSE_ID_CS9="false"
          fi

          if [[ "$COMPOSE_ID_CS9" != "false" ]]; then
              gh pr list -R virt-s1/rhel-edge --state open --json title --jq '.[].title' > PR_LIST_CS9
              PR_LIST_CS9=$(cat PR_LIST_CS9)
              if [[ $PR_LIST_CS9 == *"$COMPOSE_ID_CS9"* ]]; then
                  echo "pr_running_cs9=true" >> $GITHUB_OUTPUT
              else
                  echo "pr_running_cs9=false" >> $GITHUB_OUTPUT
              fi

              OSBUILD_VERSION_CS9=$(curl -s "${COMPOSE_URL_CS9}/${COMPOSE_ID_CS9}/compose/AppStream/x86_64/os/Packages/" | grep -ioE ">osbuild-[0-9].*<" | tr -d "><")
              OSBUILD_COMPOSER_VERSION_CS9=$(curl -s "${COMPOSE_URL_CS9}/${COMPOSE_ID_CS9}/compose/AppStream/x86_64/os/Packages/" | grep -ioE ">osbuild-composer-[0-9].*<" | tr -d "><")
              COMPOSER_CLI_VERSION_CS9=$(curl -s "${COMPOSE_URL_CS9}/${COMPOSE_ID_CS9}/compose/AppStream/x86_64/os/Packages/" | grep -ioE ">weldr-client-[0-9].*<" | tr -d "><")
              echo "osbuild_version_cs9=$OSBUILD_VERSION_CS9" >> $GITHUB_OUTPUT
              echo "osbuild_composer_version_cs9=$OSBUILD_COMPOSER_VERSION_CS9" >> $GITHUB_OUTPUT
              echo "composer_cli_version_cs9=$COMPOSER_CLI_VERSION_CS9" >> $GITHUB_OUTPUT

              curl -s ${COMPOSE_URL_CS9}/ --output COMPOSES
              COMPOSES=$(cat -n COMPOSES)
              line=$(echo "${COMPOSES}" | grep ${COMPOSE_ID_CS9} | cut -b 1-7)
              old_line=$((line - 1))
              OLD_COMPOSE_ID_CS9=$(awk "NR==${old_line}" <<< "${COMPOSES}" | tr -d "><" | grep -oP 'CentOS-Stream-9-\d+\.\d+' | tail -1)
              echo "Found previous compose: ${OLD_COMPOSE_ID_CS9}"

              APPS_URL="${COMPOSE_URL_CS9}/${COMPOSE_ID_CS9}/compose/AppStream/x86_64/os/Packages/"
              OLD_APPS_URL="${COMPOSE_URL_CS9}/${OLD_COMPOSE_ID_CS9}/compose/AppStream/x86_64/os/Packages/"
              BASEOS_URL="${COMPOSE_URL_CS9}/${COMPOSE_ID_CS9}/compose/BaseOS/x86_64/os/Packages/"
              OLD_BASEOS_URL="${COMPOSE_URL_CS9}/${OLD_COMPOSE_ID_CS9}/compose/BaseOS/x86_64/os/Packages/"

              packages=("osbuild" "osbuild-composer" "weldr-client" "acl" "alternatives" "audit-libs" "basesystem" "bash" "bubblewrap" "bzip2-libs" "ca-certificates" "centos-gpg-keys" "centos-stream-release" "centos-stream-repos" "composefs" "composefs-libs" "container-selinux" "coreutils" "coreutils-common" "cpio" "cracklib" "cracklib-dicts" "criu" "criu-libs" "crypto-policies" "cyrus-sasl-lib" "dbus" "dbus-broker" "dbus-common" "device-mapper" "device-mapper-libs" "diffutils" "dracut" "expat" "file" "file-libs" "filesystem" "findutils" "fuse" "fuse-common" "fuse-libs" "fuse-overlayfs" "fuse3" "fuse3-libs" "gawk" "gawk-all-langpacks" "gdbm-libs" "gettext" "gettext-libs" "glib2" "glibc" "glibc-common" "glibc-gconv-extra" "glibc-minimal-langpack" "gmp" "gnupg2" "gnutls" "gpgme" "grep" "grub2-common" "grub2-pc" "grub2-pc-modules" "grub2-tools" "grub2-tools-minimal" "gzip" "iptables-libs" "iptables-nft" "json-c" "json-glib" "jansson" "kbd" "kbd-legacy" "kbd-misc" "kernel-modules" "keyutils-libs" "kmod" "kmod-libs" "krb5-libs" "libacl" "libarchive" "libassuan" "libattr" "libblkid" "libbrotli" "libcap" "libcap-ng" "libcom_err" "libdb" "libeconf" "libevent" "libfdisk" "libffi" "libgcrypt" "libgcc" "libgomp" "libgpg-error" "libidn2" "libkcapi" "libkcapi-hmaccalc" "libksba" "libmnl" "libmodulemd" "libmount" "libnet" "libnetfilter_conntrack" "libnfnetlink" "libnghttp2" "libnl3" "libnftnl" "libpwquality" "libpsl" "libseccomp" "libselinux" "libselinux-utils" "libsemanage" "libsigsegv" "libslirp" "libsmartcols" "libsolv" "libssh" "libssh-config" "libtasn1" "libtool-ltdl" "libunistring" "libutempter" "libuuid" "libverto" "libxcrypt" "libxcrypt-compat" "libxml2" "libyaml" "libzstd" "lua-libs" "lz4-libs" "mpfr" "ncurses-base" "ncurses-libs" "nettle" "nftables" "npth" "openldap" "openssl" "openssl-libs" "os-prober" "ostree" "ostree-libs" "pam" "passt" "passt-selinux" "pcre" "pcre2" "pcre2-syntax" "pigz" "policycoreutils" "polkit-libs" "popt" "procps-ng" "protobuf-c" "publicsuffix-list-dafsa" "python-unversioned-command" "python3" "python3-libs" "python3-pip-wheel" "python3-setuptools-wheel" "readline" "rpm" "rpm-libs" "rpm-ostree" "rpm-ostree-libs" "rpm-plugin-selinux" "sed" "selinux-policy" "selinux-policy-targeted" "setup" "shadow-utils" "shadow-utils-subid" "skopeo" "sqlite-libs" "systemd" "systemd-libs" "systemd-pam" "systemd-rpm-macros" "systemd-udev" "tar" "tpm2-tss" "tzdata" "util-linux" "util-linux-core" "which" "xz" "xz-libs" "yajl" "zlib")
              special_pkgs=("osbuild" "basesystem" "ca-certificates" "centos-gpg-keys" "centos-stream-release" "centos-stream-repos" "container-selinux" "crypto-policies" "dbus-common" "grub2-common" "grub2-pc-modules" "kbd-legacy" "kbd-misc" "libssh-config" "libstdc++" "ncurses-base" "passt-selinux" "pcre2-syntax" "publicsuffix-list-dafsa" "python-unversioned-command" "python3-pip-wheel" "python3-setuptools-wheel" "selinux-policy" "selinux-policy-targeted" "setup" "systemd-rpm-macros" "tzdata")
              updated_pkgs=""
              count=0
              for pkg in "${packages[@]}"; do
                  if [[ " ${special_pkgs[*]} " == *" ${pkg} "* ]]; then
                      if curl -s "${APPS_URL}" | grep -ioE ">${pkg}-[0-9].*<"; then
                          new=$(curl -s "${APPS_URL}" | grep -ioE ">${pkg}-[0-9].*<" | tr -d "><")
                          old=$(curl -s "${OLD_APPS_URL}" | grep -ioE ">${pkg}-[0-9].*<" | tr -d "><")
                          if [[ "$new" == "$old" ]]; then
                              echo "======= Package ${pkg} NOT updated ========="
                          else
                              echo "======= Package ${pkg} updated ========="
                              updated_pkgs+=$'\n'"    ${new}"
                              count=$((count + 1))
                          fi
                      elif curl -s "${BASEOS_URL}" | grep -ioE ">${pkg}-[0-9].*<"; then
                          new=$(curl -s "${BASEOS_URL}" | grep -ioE ">${pkg}-[0-9].*<" | tr -d "><")
                          old=$(curl -s "${OLD_BASEOS_URL}" | grep -ioE ">${pkg}-[0-9].*<" | tr -d "><")
                          if [[ "$new" == "$old" ]]; then
                              echo "======= Package ${pkg} NOT updated ========="
                          else
                              echo "======= Package ${pkg} updated ========="
                              updated_pkgs+=$'\n'"    ${new}"
                              count=$((count + 1))
                          fi
                      else
                          echo "NOT FOUND: $pkg" >&2
                      fi
                  else
                      if curl -s "${APPS_URL}" | grep -ioE ">${pkg}-[0-9].*x86_64.*<"; then
                          new=$(curl -s "${APPS_URL}" | grep -ioE ">${pkg}-[0-9].*x86_64.*<" | tr -d "><")
                          old=$(curl -s "${OLD_APPS_URL}" | grep -ioE ">${pkg}-[0-9].*x86_64.*<" | tr -d "><")
                          if [[ "$new" == "$old" ]]; then
                              echo "======= Package ${pkg} NOT updated ========="
                          else
                              echo "======= Package ${pkg} updated ========="
                              updated_pkgs+=$'\n'"    ${new}"
                              count=$((count + 1))
                          fi
                      elif curl -s "${BASEOS_URL}" | grep -ioE ">${pkg}-[0-9].*x86_64.*<"; then
                          new=$(curl -s "${BASEOS_URL}" | grep -ioE ">${pkg}-[0-9].*x86_64.*<" | tr -d "><")
                          old=$(curl -s "${OLD_BASEOS_URL}" | grep -ioE ">${pkg}-[0-9].*x86_64.*<" | tr -d "><")
                          if [[ "$new" == "$old" ]]; then
                              echo "======= Package ${pkg} NOT updated ========="
                          else
                              echo "======= Package ${pkg} updated ========="
                              updated_pkgs+=$'\n'"    ${new}"
                              count=$((count + 1))
                          fi
                      else
                          echo "NOT FOUND: $pkg" >&2
                      fi
                  fi
              done
              echo "updated_pkgs<<EOF" >> $GITHUB_OUTPUT
              echo "${updated_pkgs}" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "count=$count" >> $GITHUB_OUTPUT
          fi

          echo "cs9_compose=$COMPOSE_ID_CS9" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      cs9_compose: ${{ steps.check_compose_id_cs9.outputs.cs9_compose }}
      osbuild_version_cs9: ${{ steps.check_compose_id_cs9.outputs.osbuild_version_cs9 }}
      osbuild_composer_version_cs9: ${{ steps.check_compose_id_cs9.outputs.osbuild_composer_version_cs9 }}
      composer_cli_version_cs9: ${{ steps.check_compose_id_cs9.outputs.composer_cli_version_cs9 }}
      pr_running_cs9: ${{ steps.check_compose_id_cs9.outputs.pr_running_cs9 }}
      updated_pkgs: ${{ steps.check_compose_id_cs9.outputs.updated_pkgs }}
      count: ${{ steps.check_compose_id_cs9.outputs.count }}

  centos-stream-9:
    needs: check-compose
    if: ${{ needs.check-compose.outputs.cs9_compose != 'false' && needs.check-compose.outputs.pr_running_cs9 == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Add new compose id in compose.cs9
        run: |
          compose_id="${{ needs.check-compose.outputs.cs9_compose }}"
          echo $compose_id >> compose/compose.cs9
          cat compose/compose.cs9

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "${{ needs.check-compose.outputs.cs9_compose }} - ${{ steps.date.outputs.date }}"
          committer: cloudkitebot <henrywangxf1@gmail.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: cpr
          branch-suffix: random
          delete-branch: true
          title: "${{ needs.check-compose.outputs.cs9_compose }} - ${{ steps.date.outputs.date }}"
          labels: auto-merge,CentOS-Stream-9
          body: |
            CentOS Stream 9 compose ${{ needs.check-compose.outputs.cs9_compose }}
            - Date: ${{ steps.date.outputs.date }}
            - Osbuild version:
                - ${{ needs.check-compose.outputs.osbuild_version_cs9 }}
                - ${{ needs.check-compose.outputs.osbuild_composer_version_cs9 }}
                - ${{ needs.check-compose.outputs.composer_cli_version_cs9 }}
            - Updated packages(${{ needs.check-compose.outputs.count }}):
                  ${{ needs.check-compose.outputs.updated_pkgs }}

      - name: Enable Pull Request Automerge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: rebase

      - name: Add a comment to trigger test workflow
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.PAT }}
          issue-number: ${{ steps.cpr.outputs.pull-request-number }}
          body: /test-cs9
