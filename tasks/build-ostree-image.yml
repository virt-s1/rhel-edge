---
- name: install osbuild* from PR repo
  block:
    - name: generate PR based osbuild repo file
      template:
        src: templates/osbuild-repo.j2
        dest: "{{ playbook_dir }}/osbuild.repo"
      delegate_to: localhost

    - name: copy osbuild mock repo file
      copy:
        src: "{{ playbook_dir }}/osbuild.repo"
        dest: /etc/yum.repos.d
      become: yes
  when: pr_number is defined and commit_sha is defined

- name: install required packages
  dnf:
    name:
      - httpd
      - osbuild-composer
      - cockpit-composer
      - composer-cli
    # enablerepo: updates-testing
    state: latest
  become: yes

- name: update all packages to latest
  dnf:
    name: "*"
    state: latest
  become: yes

- name: check package version
  command: rpm -q {{ item }}
  loop:
    - osbuild-composer
    - osbuild
    - osbuild-composer-worker
    - osbuild-ostree
    - python3-osbuild
    - composer-cli
  register: result_packages

- debug:
    var: result_packages

- name: generate empty report.xml
  template:
    src: templates/report-xml.j2
    dest: "{{ playbook_dir }}/report.xml"
  delegate_to: localhost

- name: add package info into report.xml
  xml:
    path: "{{ playbook_dir }}/report.xml"
    xpath: /testsuite/properties
    input_type: xml
    add_children:
      - <property name="package" value="{{ item.stdout }}"/>
  loop: "{{ result_packages.results }}"
  delegate_to: localhost

- name: create osbuild-composer blueprint file
  template:
    src: "{{ item }}.j2"
    dest: "{{ playbook_dir }}/{{ item }}.toml"
  loop:
    - ostree
    - upgrade
  delegate_to: localhost

- name: copy ostree.toml to build server
  copy:
    src: "{{ playbook_dir }}/{{ item }}.toml"
    dest: "/home/admin/{{ item }}.toml"
  loop:
    - ostree
    - upgrade

- name: create /etc/osbuild-composer/repositories folder
  file:
    path: /etc/osbuild-composer/repositories
    state: directory
  become: yes

- name: copy rhel-8-beta.json to /etc/osbuild-composer/repositories
  copy:
    src: "{{ playbook_dir }}/files/rhel-8-4-0.json"
    dest: /etc/osbuild-composer/repositories/{{ item }}
  become: yes
  when: os == "rhel-8-4"
  loop:
    - "rhel-8.json"
    - "rhel-8-beta.json"

- name: start osbuild-composer.socket
  systemd:
    name: osbuild-composer.socket
    state: started
  become: yes

- name: start cockpit.socket
  systemd:
    name: cockpit.socket
    state: started
  become: yes

- name: osbuild-composer status checking
  command: sudo composer-cli status show
  become: yes
  register: osbuild_status

- debug:
    var: osbuild_status

- name: add additional source to test package
  block:
    - name: generate source toml file
      template:
        src: templates/composer-source.j2
        dest: "{{ playbook_dir }}/source.toml"
      delegate_to: localhost

    - name: copy source.toml to builder
      copy:
        src: "{{ playbook_dir }}/source.toml"
        dest: /home/admin
      become: yes

    - name: add additional source
      command: "composer-cli sources add /home/admin/source.toml"
      become: yes
  when: source_yum_url is defined

- name: source list
  command: composer-cli sources list
  become: yes
  register: sources_result

- debug:
    var: sources_result

- name: sources info
  command: composer-cli sources info {{ item }}
  become: yes
  loop: "{{ sources_result.stdout_lines }}"
  register: sources_info_result

- debug:
    var: sources_info_result

- name: push ostree.toml as blueprint
  command: composer-cli blueprints push /home/admin/{{ item }}.toml
  become: yes
  loop:
    - ostree
    - upgrade

- name: show blueprint
  command: composer-cli blueprints list
  become: yes

- name: start image building
  command: "composer-cli compose start ostree {{ ostree_type[os] }}"
  become: yes
  register: compose_start
  ignore_errors: yes

- debug:
    var: compose_start

- name: get compose status
  command: composer-cli compose status
  become: yes
  register: compose_status

- name: get and set compose uuid
  set_fact:
    compose_uuid: "{{ compose_status.stdout.split()[0] }}"

- name: collect image building log no matter success or fail
  block:
    - name: wait until image building finished
      command: composer-cli compose status
      become: yes
      register: compose_status
      retries: 60
      delay: 30
      until: "'FINISHED' in compose_status.stdout"
  always:
    - name: collect compose log
      command: "composer-cli compose log {{ compose_uuid }}"
      register: result_log
      become: yes
    - name: save compose log
      copy:
        content: "{{ result_log.stdout }}"
        dest: /tmp/compose.build.log
    - name: fetch log file back
      fetch:
        src: /tmp/compose.build.log
        dest: "{{ playbook_dir }}/log/"
        flat: yes

- name: add image building result into report.xml
  xml:
    path: "{{ playbook_dir }}/report.xml"
    xpath: /testsuite
    input_type: xml
    add_children:
      - <testcase name="build {{ ostree_type[os] }}" classname="image building"></testcase>
  delegate_to: localhost

- name: add failure result into report.xml
  xml:
    path: "{{ playbook_dir }}/report.xml"
    xpath: /testsuite/testcase[@name="build {{ ostree_type[os] }}"]
    input_type: xml
    add_children:
      - <failure message="building {{ ostree_name[os] }} failed">building {{ ostree_name[os] }} failed</failure>
  delegate_to: localhost
  when: compose_status is failed

- fail:
    msg: building ostree image fail
  when: compose_status is failed

- name: download ostree image
  command: "composer-cli compose image {{ compose_uuid }}"
  become: yes

- name: unpack ostree commit into /var/www/html
  unarchive:
    src: /home/admin/{{ compose_uuid }}-commit.tar
    remote_src: yes
    dest: /var/www/html/
  become: yes

- name: start httpd
  systemd:
    name: httpd
    state: started
  become: yes

- name: fetch compose.json to work with lookup file plugin
  fetch:
    src: /var/www/html/compose.json
    dest: "{{ playbook_dir }}/log/"
    flat: yes

- name: read compose.json
  set_fact:
    compose_commit: "{{ lookup('file','{{ playbook_dir }}/log/compose.json') | from_json }}"

- debug:
    var: compose_commit

- name: set ostree commit
  set_fact:
    ostree_commit: "{{ compose_commit | json_query('\"ostree-commit\"') }}"

- name: add failure result into report.xml
  xml:
    path: "{{ playbook_dir }}/report.xml"
    xpath: /testsuite/testcase[@name="build {{ ostree_type[os] }}"]
    input_type: xml
    add_children:
      - <system-out>{{ ostree_commit }}</system-out>
  delegate_to: localhost

- name: delete generated image
  command: "composer-cli compose delete {{ compose_uuid }}"
  become: yes
