---
- hosts: localhost
  gather_facts: no
  become: no
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_connection: local
    os: "fedora-37"
    flavor:
      gcp:
        medium: "n2-standard-2"
        large: "n2-standard-4"
        xlarge: "n2-standard-8"
    images:
      centos-stream-8: edge-centos-stream-8
      centos-stream-9: edge-centos-stream-9
      fedora-35: Fedora-Cloud-Base-35
      fedora-36: edge-fedora-36
      fedora-rawhide: edge-fedora-rawhide
    image_family:
      centos-stream-8: centos-stream-8
      centos-stream-9: centos-stream-9
    image_project:
      centos-stream-8: centos-cloud
      centos-stream-9: centos-cloud
    gcp_images:
      fedora-rawhide: kite-image-fedora-rawhide
      fedora-36: kite-image-fedora-36
      fedora-37: kite-image-fedora-37
      fedora-38: kite-image-fedora-38

  tasks:
    - set_fact:
        random_num: "{{ 9999 | random(start=1001) }}"
    - set_fact:
        instance_name: "debug-gcp-{{ os }}-{{ flavor_type }}-{{ random_num }}"

    - name: gcloud/gsutil - authorizing with a service account
      command: /usr/bin/gcloud auth activate-service-account --key-file="{{ lookup('env', 'GCP_SERVICE_ACCOUNT_FILE') }}"

    - set_fact:
        image_args: "--image-family={{ image_family[os] }} --image-project={{ image_project[os] }}"
      when: "'centos' in os"

    - set_fact:
        image_args: --image="{{ gcp_images[os] }}"
      when: "'fedora' in os"

    - name: create gcp instance
      command: /usr/bin/gcloud compute instances create "{{ instance_name }}" --zone=us-central1-a --machine-type="{{ flavor['gcp'][flavor_type] }}" --boot-disk-auto-delete --boot-disk-size=80GB --boot-disk-type=pd-ssd --metadata-from-file=ssh-keys="{{ playbook_dir }}/key/gcp_key",startup-script="{{ playbook_dir }}/files/startup-script.sh" --metadata=block-project-ssh-keys=TRUE --provisioning-model=SPOT {{ image_args }} --enable-nested-virtualization --service-account="{{ lookup('env', 'GCP_SERVICE_ACCOUNT_NAME') }}" --project="{{ lookup('env', 'GCP_PROJECT') }}" --format=json
      register: result_instance

    - set_fact:
        instance_ip: "{{ result_instance.stdout | from_json | json_query('[0].networkInterfaces[0].accessConfigs[0].natIP') }}"

    - name: Waits until instance is reachable
      wait_for:
        host: "{{ instance_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      retries: 30
      register: result_ssh_check
      until: result_ssh_check is success
